openapi: 3.0.0
info:
  title: omu-rest
  description: 'Laravel製RESTful APIサーバー。著者: [connect0459](https://github.com/connect0459)'
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000/api'
    description: 'OpenApi host'
paths:
  /books_info:
    get:
      tags:
        - books_info
      summary: 'Get a list of books_info'
      operationId: 2f9e356b188781492d6410beee2297c6
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookInfo'
    post:
      tags:
        - books_info
      summary: 'Create a new books_info'
      operationId: 0c3283a323f1a4a3e81dbd5915be7518
      requestBody:
        description: 'BookInfo data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInfo'
      responses:
        201:
          description: 'Resource created'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/BookInfo'
                  -
                    properties:
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                    type: object
  '/books_info/{id}':
    get:
      tags:
        - books_info
      summary: 'Get a specific books_info by ID'
      operationId: aefd1f8354eca94d504850ef936b3fb4
      parameters:
        -
          name: id
          in: path
          description: 'ID of the books_info'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
        404:
          description: 'Resource not found'
    put:
      tags:
        - books_info
      summary: 'Update a specific books_info by ID'
      operationId: 57b90f97a8a076e500862e557256c7aa
      parameters:
        -
          name: id
          in: path
          description: 'ID of the books_info'
          required: true
          schema:
            type: string
      requestBody:
        description: 'BookInfo data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInfo'
      responses:
        200:
          description: 'Resource updated'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/BookInfo'
                  -
                    properties:
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                    type: object
        404:
          description: 'Resource not found'
    delete:
      tags:
        - books_info
      summary: 'Delete a specific books_info by ID'
      operationId: e98599424d7afa9076f6f9f4df52e4e4
      parameters:
        -
          name: id
          in: path
          description: 'ID of the books_info'
          required: true
          schema:
            type: string
      responses:
        204:
          description: 'Resource deleted'
        404:
          description: 'Resource not found'
  /books_stock:
    get:
      tags:
        - books_stock
      summary: 'Get a list of books_stock'
      operationId: c9044c5b54d9d6b8c37064812524bb45
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookStock'
    post:
      tags:
        - books_stock
      summary: 'Create a new books_stock'
      operationId: e50cdeddc9681f7435a9afe4a049ac83
      requestBody:
        description: 'BookStock data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookStock'
      responses:
        201:
          description: 'Resource created'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/BookStock'
                  -
                    properties:
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                    type: object
  '/books_stock/{id}':
    get:
      tags:
        - books_stock
      summary: 'Get a specific books_stock by ID'
      operationId: 008048fd9acd897a85d8a1426225a9ec
      parameters:
        -
          name: id
          in: path
          description: 'ID of the books_stock'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookStock'
        404:
          description: 'Resource not found'
    put:
      tags:
        - books_stock
      summary: 'Update a specific books_stock by ID'
      operationId: 8e070be5f279eddb026b7f03673016f6
      parameters:
        -
          name: id
          in: path
          description: 'ID of the books_stock'
          required: true
          schema:
            type: string
      requestBody:
        description: 'BookStock data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookStock'
      responses:
        200:
          description: 'Resource updated'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/BookStock'
                  -
                    properties:
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                    type: object
        404:
          description: 'Resource not found'
    delete:
      tags:
        - books_stock
      summary: 'Delete a specific books_stock by ID'
      operationId: 97a518364a1e7381ea6bbc749668ee1f
      parameters:
        -
          name: id
          in: path
          description: 'ID of the books_stock'
          required: true
          schema:
            type: string
      responses:
        204:
          description: 'Resource deleted'
        404:
          description: 'Resource not found'
  /contacts:
    get:
      tags:
        - contacts
      summary: 'Get a list of contacts'
      operationId: e670331f5da6af785062a857ec92def2
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
    post:
      tags:
        - contacts
      summary: 'Create a new contact'
      operationId: 77b53a0b0cb97bf04eafa192e4cbac4e
      requestBody:
        description: 'Contact data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        201:
          description: 'Resource created'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/Contact'
  '/contacts/{id}':
    get:
      tags:
        - contacts
      summary: 'Get a specific contact by ID'
      operationId: 4c4e002507e3a53acc022b210aad20ac
      parameters:
        -
          name: id
          in: path
          description: 'ID of the contact'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        404:
          description: 'Resource not found'
    put:
      tags:
        - contacts
      summary: 'Update a specific contact by ID'
      operationId: adc814a54ff3a1fdc424293b19ffe8a7
      parameters:
        -
          name: id
          in: path
          description: 'ID of the contact'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Contact data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        200:
          description: 'Resource updated'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/Contact'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - contacts
      summary: 'Delete a specific contact by ID'
      operationId: bc8b0b91abd89481c321fcdb966dc355
      parameters:
        -
          name: id
          in: path
          description: 'ID of the contact'
          required: true
          schema:
            type: string
      responses:
        204:
          description: 'Resource deleted'
        404:
          description: 'Resource not found'
  /news:
    get:
      tags:
        - news
      summary: 'Get a list of news'
      operationId: 21b84dbdd75fd20b9c9ddb9b9e68f0a1
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/News'
    post:
      tags:
        - news
      summary: 'Create a new news'
      operationId: d6a12c2e3b4ea9ab588ba9b1cb14748f
      requestBody:
        description: 'News data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        201:
          description: 'Resource created'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/News'
  '/news/{id}':
    get:
      tags:
        - news
      summary: 'Get a specific news by ID'
      operationId: eb815321a4dd395639d4aeef25d9a45c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the news'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        404:
          description: 'Resource not found'
    put:
      tags:
        - news
      summary: 'Update a specific news by ID'
      operationId: 25ea273290c6cb379ab85e08ff4fadfc
      parameters:
        -
          name: id
          in: path
          description: 'ID of the news'
          required: true
          schema:
            type: string
      requestBody:
        description: 'News data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        200:
          description: 'Resource updated'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  -
                    $ref: '#/components/schemas/News'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - news
      summary: 'Delete a specific news by ID'
      operationId: bbe79a918bfbb58bc46ed74b43e9b986
      parameters:
        -
          name: id
          in: path
          description: 'ID of the news'
          required: true
          schema:
            type: string
      responses:
        204:
          description: 'Resource deleted'
        404:
          description: 'Resource not found'
components:
  schemas:
    BookInfo:
      description: 'BookInfo Model'
      properties:
        id:
          description: ID
          type: integer
          format: int64
          example: '1'
        isbn:
          description: 'ISBN-13 or ISBN-10'
          type: string
          format: string
          example: '9784908434266'
        title:
          description: タイトル
          type: string
          format: string
          example: これだけは知っておこう!情報リテラシー
        author:
          description: 著者
          type: string
          format: string
          example: noa出版
        publisher:
          description: 出版社
          type: string
          format: string
          example: '9784908434266'
        genre:
          description: ジャンル
          type: string
          format: string
          example: 情報学
        list_price:
          description: 定価
          type: integer
          format: int64
          example: '1000'
        sale_price:
          description: 販売額
          type: integer
          format: int64
          example: '500'
        created_at:
          description: レコード作成日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
        updated_at:
          description: レコード更新日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
      type: object
    BookStock:
      description: 'BookStock Model'
      properties:
        id:
          description: ID
          type: integer
          format: int64
          example: '1'
        books_info_id:
          description: ユニーク制約・外部キー制約（books_infoテーブル）
          type: integer
          format: int64
          example: '1'
        isbn:
          description: 'ISBN-13 or ISBN-10'
          type: string
          format: string
          example: '9784908434266'
        stock:
          description: 未販売の在庫数
          type: integer
          format: int64
          example: '4'
        order:
          description: 未処理の予約数
          type: integer
          format: int64
          example: '1'
        sold:
          description: 販売済みの在庫数
          type: integer
          format: int64
          example: '1'
        created_at:
          description: レコード作成日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
        updated_at:
          description: レコード更新日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
      type: object
    Contact:
      description: 'Contact Model'
      properties:
        id:
          description: ID
          type: integer
          format: int64
          example: '1'
        unique:
          description: お問い合わせ番号として相手に送信する一意な値
          type: string
          format: string
          example: 230C001
        name:
          description: 名前
          type: string
          format: string
          example: SFT太郎
        belong:
          description: 所属
          type: string
          format: string
          example: SFT大学
        email:
          description: メールアドレス
          type: string
          format: string
          example: example@studyfortwo.org
        summary:
          description: 概要
          type: string
          format: string
          example: メンバー加入について
        detail:
          description: 詳細
          type: string
          format: string
          example: 活動に興味があるのですが、この時期からでも入れますか？
        created_at:
          description: レコード作成日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
        updated_at:
          description: レコード更新日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
      type: object
    News:
      description: 'News Model'
      properties:
        id:
          description: ID
          type: integer
          format: int64
          example: '1'
        title:
          description: ニュースのタイトル
          type: string
          format: string
          example: サイトの稼働が開始しました。
        detail:
          description: ニュースの記事
          type: string
          format: string
          example: 2023年6月20日からサイトを稼働しております。
        created_at:
          description: レコード作成日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
        updated_at:
          description: レコード更新日
          type: string
          format: date-time
          example: '2023-06-20T21:20:14.000000Z'
      type: object
  securitySchemes:
    BearerAuth:
      type: apiKey
      name: api_token
      in: header
